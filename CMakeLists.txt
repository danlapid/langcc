cmake_minimum_required(VERSION 3.13.4) # 3.13.4 comes from https://llvm.org/docs/CMake.html#embedding-llvm-in-your-project
project(langcc VERSION 1.0.0)
set (PROJECT_SUMMARY "A Next-Generation Compiler Compiler")
# C++ standard requirements
set(CMAKE_CXX_STANDARD 17)

#
# OS flags
#
if (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
  set(MACOSX TRUE)
else ()
  set(MACOSX FALSE)
endif ()

#
# Find dependencies
#
find_package(LLVM REQUIRED CONFIG)
message(STATUS "Found LLVM ${LLVM_PACKAGE_VERSION}")
message(STATUS "Using LLVMConfig.cmake in: ${LLVM_DIR}")
if (NOT MACOSX)
  find_package(Unwind REQUIRED)
endif ()


#
# Add LLVM definitions
separate_arguments(LLVM_DEFINITIONS_LIST NATIVE_COMMAND ${LLVM_DEFINITIONS})
add_definitions(${LLVM_DEFINITIONS_LIST})

#
# Set include directories
#
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/src ${CMAKE_CURRENT_SOURCE_DIR}/gen ${LLVM_INCLUDE_DIRS})

#
# Create datacc target
#
add_executable(datacc
  ${CMAKE_CURRENT_SOURCE_DIR}/src/datacc.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/gen/cc__gen.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/gen/data__gen.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/datacc_main.cpp
)

#
# Files generated by datacc
#
add_custom_command(
    COMMAND ${CMAKE_CURRENT_BINARY_DIR}/datacc ${CMAKE_CURRENT_SOURCE_DIR}/src/common.data ${CMAKE_CURRENT_SOURCE_DIR}/gen
    DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/datacc ${CMAKE_CURRENT_SOURCE_DIR}/src/common.data
    OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/gen/common__data_gen.cpp
)

#
# Create langcc target
#
add_executable(langcc
  ${CMAKE_CURRENT_SOURCE_DIR}/src/langcc.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/langcc_lexer.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/langcc_parser_flatten.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/langcc_parser_attr.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/langcc_parser_cps.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/langcc_parser_lr.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/langcc_encode.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/langcc_normalize.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/langcc_emit.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/gen/cc__gen.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/gen/data__gen.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/gen/meta__gen.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/gen/common__data_gen.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/datacc.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/langcc_main.cpp
)

add_library(langcc_lib INTERFACE)
target_include_directories(langcc_lib INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/src)

#
# Compile options
#
foreach (_project datacc langcc)
  #
  # Enable some C++ compiler flags when supported
  #
  target_compile_options(${_project} PRIVATE
    $<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:AppleClang>,$<CXX_COMPILER_ID:GNU>>:
    -Wno-attributes>)
  #
  # Libraries
  #
  if (NOT MACOSX)
    target_link_libraries(${_project} PRIVATE Unwind::unwind)
  endif ()
endforeach ()
