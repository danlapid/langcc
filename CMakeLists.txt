cmake_minimum_required(VERSION 3.9)
cmake_policy(SET CMP0069 NEW)
set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)

project(langcc VERSION 1.0.0)
set (PROJECT_SUMMARY "A Next-Generation Compiler Compiler")
# C++ standard requirements
set(CMAKE_CXX_STANDARD 17)

#
# Set include directories
#
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/src ${CMAKE_CURRENT_SOURCE_DIR}/test ${CMAKE_CURRENT_SOURCE_DIR}/gen)
add_compile_definitions(__CC__=${CMAKE_CXX_COMPILER})
if (MSVC)
  add_compile_options(/wd4244 /wd4065 /wd4996 /wd5051 /wd4311 /wd4302 /wd4018)
  add_link_options(/Stack:0xa00000) # Linux stack is 10MB by default, windows is 1MB
endif()

#
# Create datacc target
#
add_library(datacclib STATIC
  ${CMAKE_CURRENT_SOURCE_DIR}/src/datacc.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/gen/cc__gen.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/gen/data__gen.cpp
)
add_executable(datacc
  ${CMAKE_CURRENT_SOURCE_DIR}/src/datacc_main.cpp
)
target_link_libraries(datacc datacclib)

#
# Files generated by datacc
#
add_custom_command(
    COMMAND $<TARGET_FILE:datacc> ${CMAKE_CURRENT_SOURCE_DIR}/src/common.data ${CMAKE_CURRENT_SOURCE_DIR}/gen
    DEPENDS datacc ${CMAKE_CURRENT_SOURCE_DIR}/src/common.data
    OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/gen/common__data_gen.cpp
)

#
# Create langcc target
#
add_library(langcclib STATIC
  ${CMAKE_CURRENT_SOURCE_DIR}/src/langcc.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/langcc_lexer.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/langcc_parser_flatten.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/langcc_parser_attr.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/langcc_parser_cps.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/langcc_parser_lr.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/langcc_encode.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/langcc_normalize.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/langcc_emit.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/gen/meta__gen.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/gen/common__data_gen.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/gen/cc__gen.cpp
)
add_executable(langcc
  ${CMAKE_CURRENT_SOURCE_DIR}/src/langcc_main.cpp
)
target_link_libraries(langcc langcclib datacclib)

#
# Create test targets
#

# Unittests:
add_executable(unittest_lib
  EXCLUDE_FROM_ALL
  ${CMAKE_CURRENT_SOURCE_DIR}/test/unittest_lib_main.cpp
)
add_executable(unittest_lang
  EXCLUDE_FROM_ALL
  ${CMAKE_CURRENT_SOURCE_DIR}/test/unittest_lang_main.cpp
)

find_package(Threads REQUIRED)
target_link_libraries(unittest_lib PRIVATE Threads::Threads)
target_link_libraries(unittest_lang PRIVATE Threads::Threads langcclib datacclib)

# go_standalone_test
add_custom_command(
    COMMAND $<TARGET_FILE:langcc> ${CMAKE_CURRENT_SOURCE_DIR}/grammars/go.lang ${CMAKE_CURRENT_SOURCE_DIR}/gen
    DEPENDS langcc ${CMAKE_CURRENT_SOURCE_DIR}/grammars/go.lang
    OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/gen/go__gen.cpp
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
)
add_executable(go_standalone_test
  EXCLUDE_FROM_ALL
  ${CMAKE_CURRENT_SOURCE_DIR}/test/go_standalone_test.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/gen/go__gen.cpp
)
add_executable(go_standalone_bidir_test
  EXCLUDE_FROM_ALL
  ${CMAKE_CURRENT_SOURCE_DIR}/test/go_standalone_bidir_test.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/gen/go__gen.cpp
)

# py_standalone_test
add_custom_command(
    COMMAND $<TARGET_FILE:langcc> ${CMAKE_CURRENT_SOURCE_DIR}/grammars/py.lang ${CMAKE_CURRENT_SOURCE_DIR}/gen
    DEPENDS langcc ${CMAKE_CURRENT_SOURCE_DIR}/grammars/py.lang
    OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/gen/py__gen.cpp
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
)
add_executable(py_standalone_test
  EXCLUDE_FROM_ALL
  ${CMAKE_CURRENT_SOURCE_DIR}/test/py_standalone_test.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/gen/py__gen.cpp
)
add_executable(py_standalone_bidir_test
  EXCLUDE_FROM_ALL
  ${CMAKE_CURRENT_SOURCE_DIR}/test/py_standalone_bidir_test.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/gen/py__gen.cpp
)
