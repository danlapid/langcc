// Python 3.9.12
//
// Note that this grammar may deviate from the standard language spec
// in a number of ways, including those detailed in the accompanying
// technical report.

tokens {
    ws <= ` ` | `\t` | `\r` | `\f` | `\n`;

    id <- id_leading id_trailing* - kw;
    id_leading <= `a`..`z` | `A`..`Z` | `_` | (unicode_any - ascii_base_any);
    id_trailing <= `a`..`z` | `A`..`Z` | `_` | `0`..`9`
                 | (unicode_any - ascii_base_any);

    kw <= `import` | `class`  | `def`     | `if`     | `elif`   | `else`
        | `is`     | `and`    | `or`      | `not`    | `in`     | `await`
        | `try`    | `except` | `finally` | `pass`   | `for`    | `lambda`
        | `lambda` | `async`  | `as`      | `with`   | `global` | `nonlocal`   
        | `yield`  | `raise`  | `from`    | `del`    | `break`  | `continue`
        | `return` | `while`  | `assert`  | `None`   | `True`   | `False`;

    op <= `(`   | `)`   | `[`   | `]`   | `:`   | `,`   | `;`   | `+`
        | `-`   | `*`   | `/`   | `|`   | `&`   | `<`   | `>`   | `=`
        | `.`   | `%`   | `{`   | `}`   | `~`   | `^`   | `@`   | `==`
        | `!=`  | `<=`  | `>=`  | `<<`  | `>>`  | `**`  | `+=`  | `-=`
        | `*=`  | `/=`  | `%=`  | `&=`  | `|=`  | `^=`  | `//`  | `@=`
        | `:=`  | `->`  | `<<=` | `>>=` | `**=` | `//=` | `...` ;

    unicode_non_backslash <= unicode_any - `\\`;
    ascii_non_backslash <= ascii_base_any - `\\`;

    str_prefix <= ``   | `r`  | `u`  | `R`  | `U`  | `f`  | `F`
                | `fr` | `Fr` | `fR` | `FR` | `rf` | `rF` | `Rf` | `RF`;
    str_lit_double_start <= str_prefix `"`;
    str_lit_single_start <= str_prefix `'`;
    str_lit_block_double_start <= str_prefix `"""`;
    str_lit_block_single_start <= str_prefix `'''`;
    str_esc <= `\\` unicode_any;
    str_char_single <= unicode_any - (`\\` | `\n` | `'`);
    str_char_double <= unicode_any - (`\\` | `\n` | `"`);
    str_lit <- false;  // Emitted by lexer mode

    bytes_prefix <=
        `b` | `B` | `br` | `Br` | `bR` | `BR` | `rb` | `rB` | `Rb` | `RB`;
    bytes_lit_double_start <= bytes_prefix `"`;
    bytes_lit_single_start <= bytes_prefix `'`;
    bytes_lit_block_double_start <= bytes_prefix `"""`;
    bytes_lit_block_single_start <= bytes_prefix `'''`;
    bytes_esc <= `\\` ascii_base_any;
    bytes_char_single <= ascii_base_any - (`\\` | `\n` | `'`);
    bytes_char_double <= ascii_base_any - (`\\` | `\n` | `"`);
    bytes_lit <- false;  // Emitted by lexer mode

    int_lit <- dec_lit | bin_lit | oct_lit | hex_lit;
    dec_lit <= (`1`..`9`) (`_`? (`0`..`9`))* | `0`+ (`_`? `0`)*;
    bin_lit <= `0` (`b` | `B`) (`_`? `0`..`1`)+;
    oct_lit <= `0` (`o` | `O`) (`_`? `0`..`7`)+;
    hex_lit <= `0` (`x` | `X`) (`_`? hex_digit)+;
    hex_digit <= `0`..`9` | `a`..`f` | `A`..`F`;

    float_lit <- point_float | exp_float;
    point_float <= digit_part? fraction | digit_part `.`;
    exp_float <= (digit_part | point_float) exponent;
    digit_part <= `0`..`9` (`_`? `0`..`9`)*;
    fraction <= `.` digit_part;
    exponent <= (`e` | `E`) (`+` | `-`)? digit_part;

    imag_lit <- (point_float | exp_float | digit_part) (`j` | `J`);

    top <=
        id | kw | op | int_lit | float_lit | imag_lit | str_lit | bytes_lit;
}

lexer {
    main { body }

    mode body ws_sig(`\\`; `[`, `]`, `{`, `}`, `(`, `)`) {
        top => { emit; }
        ws => { pass; }
        `\\` => { pass; }
        `#` => { push comment; pass; }
        str_lit_double_start => { push str_lit_double; pass; }
        str_lit_single_start => { push str_lit_single; pass; }
        str_lit_block_double_start => { push str_lit_block_double; pass; }
        str_lit_block_single_start => { push str_lit_block_single; pass; }
        bytes_lit_double_start => { push bytes_lit_double; pass; }
        bytes_lit_single_start => { push bytes_lit_single; pass; }
        bytes_lit_block_double_start => { push bytes_lit_block_double; pass; }
        bytes_lit_block_single_start => { push bytes_lit_block_single; pass; }
        eof => { pop; }
    }

    mode str_lit_double {
        `"` => { pass; pop_emit str_lit; }
        str_esc => { pass; }
        str_char_double => { pass; }
    }

    mode str_lit_single {
        `'` => { pass; pop_emit str_lit; }
        str_esc => { pass; }
        str_char_single => { pass; }
    }

    mode str_lit_block_double {
        `"""` => { pass; pop_emit str_lit; }
        str_esc => { pass; }
        unicode_non_backslash => { pass; }
    }

    mode str_lit_block_single {
        `'''` => { pass; pop_emit str_lit; }
        str_esc => { pass; }
        unicode_non_backslash => { pass; }
    }

    mode bytes_lit_double {
        `"` => { pass; pop_emit bytes_lit; }
        bytes_esc => { pass; }
        bytes_char_double => { pass; }
    }

    mode bytes_lit_single {
        `'` => { pass; pop_emit bytes_lit; }
        bytes_esc => { pass; }
        bytes_char_single => { pass; }
    }

    mode bytes_lit_block_double {
        `"""` => { pass; pop_emit bytes_lit; }
        bytes_esc => { pass; }
        ascii_non_backslash => { pass; }
    }

    mode bytes_lit_block_single {
        `'''` => { pass; pop_emit bytes_lit; }
        bytes_esc => { pass; }
        ascii_non_backslash => { pass; }
    }

    mode comment {
        `\n` => { pop_extract; }
        _ => { pass; }
    }
}

parser {
    main { Module, Stmt, ExprNL }

    prop { name_strict; }

    attr {
        // I: simple identifier
        // D: dotted name
        // A: syntactically assignable

        match {
            Expr => {
                match {
                    Id | Dot => lhs[A],
                    Tuple | List | Star | Paren => lhs[A] -> rhs[A],
                    Index => lhs[A] -> rhs_begin[A],
                };

                match {
                    Id => lhs[D],
                    Dot => lhs[D] -> rhs[D],
                };

                match {
                    Lit.Int_ => lhs[Z],
                    _ => lhs[NZ],
                };
            },

            ExprNL => {
                lhs[I] -> rhs[I];
                lhs[D] -> rhs[D];
                lhs[A] -> rhs[A];
            },
        };
    }

    prec {
        Expr.Named;
        Expr.Ternary Expr.Lambda assoc_right;
        CompClauseFor CompClauseIf prefix;
        Expr.Or assoc_left;
        Expr.And assoc_left;
        Expr.Not assoc_right;
        Expr.Cmp assoc_left;
        Expr.Star prefix;
        Expr.Bin.L1 assoc_left;
        Expr.Bin.L2 assoc_left;
        Expr.Bin.L3 assoc_left;
        Expr.Bin.L4 assoc_left;
        Expr.Bin.L5 assoc_left;
        Expr.Bin.L6 assoc_left;
        Expr.UnaryPre prefix;
        Expr.Bin.L7 assoc_left;
        Expr.Await;
        Expr.Call.Args Expr.Call.Comp Expr.Index
            Expr.Dot.Z Expr.Dot.NZ postfix;
        Expr.Id Expr.IdSpecial Expr.Lit.Int_ Expr.Lit.Float Expr.Lit.Imag
            Expr.Lit.Str_ Expr.Lit.Bytes Expr.Paren
            Expr.List Expr.ListComp Expr.SetConsComp Expr.SetCons
            Expr.DictCons Expr.DictConsComp Expr.ParenComp Expr.ParenYield
            Expr.Tuple.Empty Expr.Tuple.Single Expr.Tuple.Multi Expr.Ellipsis;
    }

    Module <- stmts:#T[Stmt::eps];

    Block.Single <- stmts:StmtsSm newline;
    Block.Multi <- newline indent stmts:#L[Stmt::+eps] dedent;

    Stmt.ClassDef <- dec:Decorator*
        `class` _ name:id args:(`(` Args `)`)? `:` body:Block;

        Args <= #L[~Arg::`,`_:?];

        Arg.Val <- x:Expr;
        Arg.KV.Single <- name:Id `=` val:Expr;
        Arg.KV.Splice <- `**` x:Expr;

        Decorator <- `@` x:Expr newline;

    Stmt.FuncDef <- dec:Decorator*
        async:(`async` _)? `def` _ name:id `(` params:Params `)`
        ret_type:(_ `->` _ Expr)? `:` body:Block;

        Params <= #L[Param::`,`:?];

        Param.Named <- name:Id ty:(`:` _ Expr)? default_:(`=` Expr)?;
        Param.Star <- `*` name:Id ty:(`:` _ Expr)?;
        Param.Kw <- `**` name:Id ty:(`:` _ Expr)?;
        Param.Marker.Pos <- `/`;
        Param.Marker.Kw <- `*`;

        ParamsNT <= #L[ParamNT::`,`:?];

        ParamNT.Named <- name:Id default_:(`=` Expr)?;
        ParamNT.Star <- `*` name:Id;
        ParamNT.Kw <- `**` name:Id;
        ParamNT.Marker.Pos <- `/`;
        ParamNT.Marker.Kw <- `*`;

    Stmt.If <- `if` _ cond:Expr `:` body:Block
        xfs:(`elif` _ cond:Expr `:` body:Block)* xr:(`else` `:` body:Block)?;

    Stmt.While <- `while` _ cond:Expr `:` body:Block
        xr:(`else` `:` body:Block)?;

    Stmt.For <- async_:(`async` _)? `for` _ xs:#L[Expr[A]::+`,`_:?] _
        `in` _ ys:Exprs `:` body:Block xr:(`else` `:` body:Block)?;

    Stmt.Try <- `try` `:` body:Block
        xe:(`except` _ cl:ExceptClause `:` body:Block)*
        xr:(`else` `:` body:Block)? xf:(`finally` `:` body:Block)?;

        ExceptClause.Value <- val:Expr name:(_ `as` _ id)?;
        ExceptClause.Default <- eps;

    Stmt.With <- async:(`async` _)? `with` _
        xs:#L[x:Expr xa:(_ `as` _ Expr)?::+`,`_] `:` body:Block;

    Stmt.Simple <- items:StmtsSm newline;

    StmtSm.Del <- `del` _ xs:Exprs;
    StmtSm.Pass <- `pass`;
    StmtSm.Flow.Break <- `break`;
    StmtSm.Flow.Continue <- `continue`;
    StmtSm.Flow.Return <- `return` vals:(_ Exprs)?;
    StmtSm.Flow.Raise.Base <- `raise` x:(_ Expr)?;
    StmtSm.Flow.Raise.From <- `raise` _ x:Expr _ `from` _ xr:Expr;
    StmtSm.Flow.Yield <- x:~Yield;

        Yield.Val <- `yield` _ xs:#L[Expr::`,`:?];
        Yield.From <- `yield` _ `from` _ x:Expr;

    StmtSm.Import.Name <- `import` _
        xs:#L[name:DottedName xa:(_ `as` _ id)?::+`,`_];
    StmtSm.Import.From.ImportStar <- fc:~FromClause _ `import` _ `*`;
    StmtSm.Import.From.ImportNames.Base <- fc:~FromClause _ `import` _
        xs:#L[name:id xa:(_ `as` _ id)?::+`,`_:?];
    StmtSm.Import.From.ImportNames.Paren <- fc:~FromClause _ `import` _
        `(` xs:#L[name:id xa:(_ `as` _ id)?::+`,`_:?] `)`;

        FromClause.Named <- `from`
            dots:(Single:(_ `.`) | Multi:(_ `...`))* _ name:DottedName;
        FromClause.Unnamed <- `from` dots:(Single:(_ `.`) | Multi:(_ `...`))+;

    StmtSm.Global <- `global` _ xs:#L[id::+`,`_];
    StmtSm.Nonlocal <- `nonlocal` _ xs:#L[id::+`,`_];
    StmtSm.Assert <- `assert` _ xs:#L[Expr::+`,`_];

    StmtSm.Exprs <- xs:Exprs;
    StmtSm.Assign <- xs:Exprs _ y:(`=` _ ~AssignSrc)+;

        AssignSrc.Exprs <- xs:Exprs;
        AssignSrc.Yield <- x:~Yield;

    StmtSm.Ann <- x:Expr `:` ty:Expr;
    StmtSm.AnnAssign <- x:Expr `:` _ ty:Expr _ `=` _ y:~AssignSrc;
    StmtSm.AugAssign <- xs:Exprs _ op:AugAssignOp _ y:~AssignSrc;

        AugAssignOp <- PlusEq:`+=`  | MinusEq:`-=`  | TimesEq:`*=`
                     |   AtEq:`@=`  |   DivEq:`/=`  |   ModEq:`%=`
                     |  XorEq:`^=`  |   AndEq:`&=`  |    OrEq:`|=`
                     |  ShlEq:`<<=` |   ShrEq:`>>=`
                     |   TtEq:`**=` |    DdEq:`//=` ;

    Expr.List <- `[` xs:#L[Expr[pr=*]::`,`:?] `]`;
    Expr.ListComp <- `[` x:~Comp `]`;

    Expr.ParenComp <- `(` x:~Comp `)`;

        Comp <- x:Expr tail:CompTail;

        CompClause.For <- cf:CompClauseFor;
        CompClause.If <- cf:CompClauseIf;

            CompClauseFor <-
                _ async_:(`async` _)? `for` _ xs:#L[Expr[A, pr=*]::+`,`:?]
                _ `in` _ y:Expr;
            CompClauseIf <- _ `if` _ y:Expr;
            CompTail <- cf:CompClauseFor cr:CompClause*;

        InExprSuffix <= `in` _ x:Expr;
        IfExprSuffix <= `if` _ x:Expr;

        CompItemKV.Single <- xk:Expr `:` _ xv:Expr;
        CompItemKV.Splice <- `**` x:Expr;

    Expr.ParenYield <- `(` yield_:~Yield `)`;

    Expr.Paren <- `(` x:Expr[pr=*] `)`;

    Expr.Tuple.Empty <- `(` `)`;
    Expr.Tuple.Single <- `(` x:Expr[pr=*] `,` `)`;
    Expr.Tuple.Multi <- `(` x:Expr[pr=*] `,` xrs:#L[Expr[pr=*]::+`,`:?] `)`;

    Expr.SetCons <- `{` xs:#L[Expr[pr=*]::+`,`:?] `}`;
    Expr.SetConsComp <- `{` x:~Comp `}`;

    Expr.DictCons <- `{` xs:#L[~CompItemKV::`,`:?] `}`;
    Expr.DictConsComp <- `{` x:~CompItemKV tail:CompTail `}`;

    Expr.Named <- x:Id _ `:=` _ v:Expr;
    Expr.Ternary <- xt:Expr _ `if` _ cond:Expr _ `else` _ xf:Expr;
    Expr.Lambda <- `lambda` _ params:ParamsNT `:` _ body:Expr;
    Expr.Or <- x:Expr _ `or` _ y:Expr;
    Expr.And <- x:Expr _ `and` _ y:Expr;
    Expr.Not <- `not` _ x:Expr;
    Expr.Cmp <- x:Expr _ op:CmpOp _ y:Expr;
    Expr.Star <- `*` x:Expr;
    Expr.Bin.L1 <- x:Expr _ op:BinOp1 _ y:Expr;
    Expr.Bin.L2 <- x:Expr _ op:BinOp2 _ y:Expr;
    Expr.Bin.L3 <- x:Expr _ op:BinOp3 _ y:Expr;
    Expr.Bin.L4 <- x:Expr _ op:BinOp4 _ y:Expr;
    Expr.Bin.L5 <- x:Expr _ op:BinOp5 _ y:Expr;
    Expr.Bin.L6 <- x:Expr _ op:BinOp6 _ y:Expr;
    Expr.UnaryPre <- op:UnaryPreOp x:Expr;
    Expr.Bin.L7 <- x:Expr _ op:BinOp7 _ y:Expr;
    Expr.Await <- `await` _ x:Expr;
    Expr.Call.Args <- f:Expr `(` args:Args `)`;
    Expr.Call.Comp <- f:Expr `(` arg:~Comp `)`;
    Expr.Index <- x:Expr `[` inds:#L[Subscript::+`,`:?] `]`;

        Subscript.Value <- x:Expr;
        Subscript.Slice <- start:Expr? `:` stop:Expr? step:(`:` v:Expr?)?;

    Expr.Dot.Z <- x:Expr[Z] _ `.` name:id;  // To avoid confusing the lexer
    Expr.Dot.NZ <- x:Expr[NZ] `.` name:id;
    Expr.Id[I] <- name:id;
    Expr.Ellipsis <- `...`;
    Expr.IdSpecial[I] <- None:`None` | True:`True` | False:`False`;

        CmpOp <- Lt:`<`   | Gt:`>`     | Eq:`==`
               | Ge:`>=`  | Le:`<=`    | Ne:`!=`  | NotIn:(`not` _ `in`)
               | In:`in`  | Not:`not`  | Is:`is`  | IsNot:(`is` _ `not`);

        BinOp1 <- #Alt[Or:`|`];
        BinOp2 <- #Alt[Xor:`^`];
        BinOp3 <- #Alt[And:`&`];
        BinOp4 <- Shl:`<<` | Shr:`>>`;
        BinOp5 <- Plus:`+` | Minus:`-`;
        BinOp6 <- times:`*` | At:`@` | Div:`/` | Mod:`%` | Dd:`//`;
        UnaryPreOp <- Plus:`+` | Minus:`-` | Tilde:`~`;
        BinOp7 <- #Alt[Ss:`**`];

    Expr.Lit.Str_ <- xs:#L[str_lit::+_];
    Expr.Lit.Bytes <- xs:#L[bytes_lit::+_];
    Expr.Lit.Int_ <- x:int_lit;
    Expr.Lit.Float <- x:float_lit;
    Expr.Lit.Imag <- x:imag_lit;

    Id <= Expr[I];
    DottedName <= Expr[D];

    Exprs <= #L[Expr::+`,`:?];
    StmtsSm <= #L[~StmtSm::+`;`:?];

    ExprNL <- x:Expr newline;  // For testing
}

test {
    `x + 3` <- ExprNL <<>>;

    `x = 3` <- Module <<>>;

`x = 2
y = 2` <- Module <<>>;

`if x == 2:
    z = 2
` <- Module <<>>;

`if x == 2:
    z = 2` <- Module <<>>;

    `[]` <- ExprNL <<>>;

    `x + []` <- ExprNL <<>>;

    `x = []` <- Module <<>>;

`if q == 3:
    if r == 4:
        s = 5` <- Module <<>>;

`def f(x: int):
    x += 1
    return x + x

def g(x):
    x.y = """abc"""
    pass
` <- Module;

`def f(x: int):
    x += 1
    return x + x
def g(x):
    x.y = """abc"""
    pass
` <- Module <<>>;
}
