
tokens {
    a <- `a`;
    b <- `b`;
    c <- `c`;
    d <- `d`;

    top <= a | b | c | d;
}

lexer {
    main { body }

    mode body {
        top => { emit; }
        eof => { pop; }
    }
}

parser {
    main { S }

    S.cZa <- c ~Z a;
    S.dZb <- d ~Z b;
    S.cWb <- c ~W b;
    S.dWa <- d ~W a;

    Z <- c ~Zr ~Cm;
    W <- c ~Wr c;

    Cm.e <- eps;
    Cm.c <- c;

    Zr <- c c c;
    Wr <- c c c;

    prop { LR(2); }
}

compile_test {
    !LR(0);
    !LR(1);
    LR(2);
    LR(3);
}

test {
    `ccccca`;
    `dccccb`;
    `cccccca`;
    `dcccccb`;
    `ccccccb`;
    `dccccca`;

    `ccccc##b`;
    `dcccc##a`;
}
