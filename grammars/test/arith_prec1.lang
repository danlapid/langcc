
tokens {
    id <- `a`;
    ws <= ` `;
    top <= id | `*` | `+` | `-` | `/` | `n`;
}

lexer {
    main { body }

    mode body {
        top => { emit; }
        ws => { pass; }
        eof => { pop; }
    }
}

parser {
    main { Stmt, Expr }

    prop { name_strict; }

    prec {
        Expr.Bin1 assoc_left;
        Expr.Bin2 assoc_left;
        Expr.Id;
    }

    Stmt.Expr <- expr:Expr;
    Stmt.Nop <- `n`;

    Expr.Bin1 <- lhs_:Expr _ op:(ADD:`+` | SUB:`-`) _ rhs_:Expr;
    Expr.Bin2 <- lhs_:Expr _ op:(MUL:`*` | DIV:`/`) _ rhs_:Expr;

    Expr.Id <- name:id;
}

compile_test {
    !LR(0);
    LR(1);
    LR(2);
}

test {
    `n`;
    `n##n`;
    `a + a`;
    `a`;
    `a##n`;
    `a + a * a`;
    `a * a * a + a * a + a + a`;
    `a * a * a + a * a + a + a +##`;
}
